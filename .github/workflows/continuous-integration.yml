name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**', 'bugfix/**' ]
    paths:
      - 'server/**'
      - 'client/**'
  workflow_dispatch:  # Allow manual triggering

jobs:
  server-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        cd server
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run tests
      run: |
        cd server
        pytest tests/ --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.xml
        flags: server
        fail_ci_if_error: false

  client-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install dependencies
      run: |
        cd client
        npm ci
        
    - name: Lint with ESLint
      run: |
        cd client
        npm run lint
      continue-on-error: true
        
    - name: Run tests
      run: |
        cd client
        npm test
      continue-on-error: true

  database-pattern-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest
        
    - name: Run database pattern check script
      run: |
        cd server
        python scripts/check_db_patterns.py --dir .
        
    - name: Check database query patterns in tests
      run: |
        cd server
        pytest tests/test_db_patterns.py -v

  notify-slack:
    needs: [server-tests, client-tests, database-pattern-check]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack on failure
      if: ${{ needs.server-tests.result != 'success' || needs.client-tests.result != 'success' || needs.database-pattern-check.result != 'success' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: ci-alerts
        SLACK_COLOR: danger
        SLACK_TITLE: CI Pipeline Failed
        SLACK_MESSAGE: 'Continuous Integration pipeline failed on main branch. Please check the logs.'
        SLACK_FOOTER: 'Dog Breeding App CI'
      continue-on-error: true
