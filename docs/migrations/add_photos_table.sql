-- Create a new table for all photo types (dogs, litters, puppies)
CREATE TABLE photos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  related_type TEXT NOT NULL, -- 'dog', 'litter', 'puppy'
  related_id BIGINT NOT NULL,
  url TEXT NOT NULL,
  original_filename TEXT,
  is_cover BOOLEAN NOT NULL DEFAULT FALSE,
  "order" INTEGER NOT NULL DEFAULT 0,
  caption TEXT,
  created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create an index for faster lookups
CREATE INDEX idx_photos_related ON photos (related_type, related_id);

-- Create a unique constraint to ensure only one cover photo per entity
CREATE UNIQUE INDEX idx_photos_cover ON photos (related_type, related_id) WHERE is_cover = TRUE;

-- Add RLS policies for photos
ALTER TABLE photos ENABLE ROW LEVEL SECURITY;

-- Enable ANON read access to photos
CREATE POLICY "Allow anon to read photos" 
  ON photos 
  FOR SELECT 
  TO anon
  USING (true);

-- Enable authenticated users to select photos
CREATE POLICY "Allow authenticated users to select photos" 
  ON photos 
  FOR SELECT 
  TO authenticated
  USING (true);

-- Enable authenticated users to insert photos
CREATE POLICY "Allow authenticated users to insert photos" 
  ON photos 
  FOR INSERT 
  TO authenticated
  WITH CHECK (true);

-- Enable authenticated users to update their own photos
CREATE POLICY "Allow authenticated users to update their own photos" 
  ON photos 
  FOR UPDATE 
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Enable authenticated users to delete their own photos
CREATE POLICY "Allow authenticated users to delete their own photos" 
  ON photos 
  FOR DELETE 
  TO authenticated
  USING (true);

-- Create trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_photos_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_photos_updated_at
BEFORE UPDATE ON photos
FOR EACH ROW
EXECUTE FUNCTION update_photos_updated_at();

-- Add a unique constraint to ensure only one cover photo per entity
ALTER TABLE photos ADD CONSTRAINT unique_cover_photo 
  UNIQUE (related_type, related_id, is_cover)
  DEFERRABLE INITIALLY IMMEDIATE;

-- Add function to set a photo as cover and unset others
CREATE OR REPLACE FUNCTION set_photo_as_cover(p_photo_id BIGINT)
RETURNS VOID AS $$
DECLARE
  v_related_type TEXT;
  v_related_id BIGINT;
BEGIN
  -- Get the photo's related_type and related_id
  SELECT related_type, related_id INTO v_related_type, v_related_id
  FROM photos
  WHERE id = p_photo_id;
  
  -- Update all photos for this entity to set is_cover = false
  UPDATE photos
  SET is_cover = FALSE
  WHERE related_type = v_related_type
    AND related_id = v_related_id;
    
  -- Set the specified photo as cover
  UPDATE photos
  SET is_cover = TRUE
  WHERE id = p_photo_id;
END;
$$ LANGUAGE plpgsql;